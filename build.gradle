/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java Library project to get you started.
 * For more details take a look at the Java Libraries chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.3/userguide/java_library_plugin.html
 */

plugins {
    // Apply the java-library plugin to add support for Java Library
    id 'java-library'
}

repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:27.0.1-jre'

    // Use JUnit test framework
    testImplementation 'junit:junit:4.12'
    // testImplementation 'org.hamcrest.core.Is'
    compile fileTree(dir: 'libs', include: '*.jar')
    runtime files('./libs')
}

// defaultTsks 'changeClassName'

task helloWorld {
    doLast {
        println "Hello World"
    }
}

// あとで
task changeClassName {
    doLast {
        def filePath = "src/main/java/";
        fileList(filePath + "K11").each { File file ->
            // delete .txt and continue iterate
            if (file.name.contains(".txt")) {
                deleteFile(filePath + "K11/" + file.name)
                return
            }
            ant.move(file: filePath + "K11/" + file.name, tofile: filePath + "K11/" + "K11_" + file.name, overwrite: true)
            // load .java file
            ant.loadfile(srcFile: filePath + "K11/" + "K11_" + file.name, property: file.name)
            rewriteClassName(filePath + "K11/", "K11_" + file.name, "K11")
            println ant.properties[file.name]
        }
    }
}

void deleteFile(String file) {
    project.delete file
}

// クラス名の最初に数字不可
// ファイル名自体renameする必要あり
void rewriteClassName(String dir, String file, String grade) {
    // クラス名間違えてるやつ除外する
    // しないならgradeには同じ値を呼び出し元で引数にするべき
    def fileNames = file.split(".java")[0].toString()
    ant.replace(file: dir + file, token:"public class ${grade}", value:"public class ${fileNames}")
}

File[] fileList(String dir) {
    file(dir).listFiles({file -> file.isFile() } as FileFilter).sort()
}

